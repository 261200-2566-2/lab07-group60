import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set ;

/**
 * A class that implements the Set interface using a HashMap as the backing data structure.
 *
 * @param <LUVAOM> the type of elements in the set
 */
public class setUsingHashMap<LUVAOM> implements Set<LUVAOM>{
        private HashMap<LUVAOM, Object> map;
        private static final Object PRESENT = new Object();

        /**
         * Constructs a new setUsingHashMap.
         */
        public setUsingHashMap() {
                map = new HashMap<>();
        }

        /**
         * @return the number of elements in the set
         */
        
        @Override
        public int size() {
                return map.size();
        }
        /**
         * @return true if the set is empty, false otherwise
         */
        @Override
        public boolean isEmpty() {
                return map.isEmpty();
        }

        /**
         * @param o the element to search for
         * @return true if the set contains the specified element, false otherwise
         */
        @Override
        public boolean contains(Object o) {
                return map.containsKey(o);
        }

        /**
         * @return an iterator over the elements in the set
         */
        @Override
        public Iterator<LUVAOM> iterator() {
                return map.keySet().iterator();
        }

        // un-mention method
        @Override
        public Object[] toArray() {
                return new Object[0];
        }

        // un-mention method
        @Override
        public <T> T[] toArray(T[] a) {
                return null;
        }

        /** un-mention methods
        @Override
        public Object[] toArray() {
                return map.keySet().toArray();
        }

        @Override
        public <T> T[] toArray(T[] a) {
                return map.keySet().toArray(a);
        }
         **/


        /**
         * Adds a new element to the set.
         *
         * @param e the element to add
         * @return true if the element was not already present in the set, false otherwise
         */
        @Override
        public boolean add(LUVAOM e) {
                return map.put(e , PRESENT)==null;
        }

        /**
         * Removes the specified element from the set.
         *
         * @param o the element to remove
         * @return true if the element was present in the set, false otherwise
         */
        @Override
        public boolean remove(Object o) {
                return map.remove(o)==PRESENT;
        }

        /**
         * @param c the collection to check for presence in the set.
         * @return true if the set contains all the elements in the collection, false otherwise.
         */
        @Override
        public boolean containsAll(Collection<?> c) {
                for (Object element : c) {
                        if (!map.containsKey(element)) {
                                return false;
                        }
                }
                return true;
        }

        /**
         * Adds all the elements in the specified collection to the set.
         *
         * @param c the collection containing the elements to add to the set.
         * @return true if the set was modified as a result of the call.
         */
        @Override
        public boolean addAll(Collection<? extends LUVAOM> c) {
                for (LUVAOM element : c) {
                        add(element);
                }
                return true;
        }

        /**
         * Retains only the elements in the set that are contained in the specified collection.
         *
         * @param c the collection containing the elements to retain in the set.
         * @return true if the set was modified as a result of the call.
         */
        @Override
        public boolean retainAll(Collection<?> c) {
                boolean modified = false;
                for (Iterator<LUVAOM> iterator = map.keySet().iterator(); iterator.hasNext(); ) {
                        LUVAOM element = iterator.next();
                        if (!c.contains(element)) {
                                iterator.remove();
                                modified = true;
                        }
                }
                return modified;
        }

        /**
         * Removes from the set all of its elements that are contained in the specified collection.
         *
         * @param c the collection containing the elements to remove from the set.
         * @return true if the set was modified as a result of the call.
         */
        @Override
        public boolean removeAll(Collection<?> c) {
                boolean modified = false;
                for (Object element : c) {
                        if (map.remove(element) != null) {
                                modified = true;
                        }
                }
                return modified;
        }

        /**
         * Removes all the elements from the set.
         */
        @Override
        public void clear() {
                map.clear();
        }
        /**
         * print all the elements from the set.
         */
        public void printSet() {
                int i = 0;
                for (LUVAOM element : map.keySet()) {
                        i++;
                        System.out.println(i + " : " + element);
                }
        }
}